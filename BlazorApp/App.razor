@using System.IdentityModel.Tokens.Jwt
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager
@inject HttpClient Http

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <CascadingValue Value="@isLoggedIn">
            <CascadingValue Value="@CurrentUserId">
                <CascadingValue Value="@Cart">
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                    <FocusOnNavigate RouteData="@routeData" Selector="h1" />
                 </CascadingValue>
            </CascadingValue>
        </CascadingValue>
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    bool isLoggedIn = false;
    string CurrentUserId;
    CartModel Cart = new();

    protected override async Task OnInitializedAsync()
    {
        NavManager.LocationChanged += NavigationManager_LocationChanged;
        Cart.Products = new Dictionary<int, int>();
        await CheckLocalStorage().ContinueWith((o) => StateHasChanged());;
    }

    private async Task CheckLocalStorage()
    {
        if(await localStorage.ContainKeyAsync("jwtToken"))
        {
            //Authorization
            var stream = await localStorage.GetItemAsync<string>("jwtToken");  
            Http.DefaultRequestHeaders.Add("Authorization", "Bearer " + stream);
            var handler = new JwtSecurityTokenHandler();
            var jsonToken = handler.ReadToken(stream);
            var tokenS = jsonToken as JwtSecurityToken;
            var expDate = tokenS.ValidTo;
            if (expDate < DateTime.UtcNow.AddMinutes(1))
            {
                Console.WriteLine("Token expired");
                await localStorage.ClearAsync();
            } else
            {
                CurrentUserId = tokenS.Claims.First(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/authentication").Value;
                isLoggedIn = true;
            }
        }
    }

    private void NavigationManager_LocationChanged(object sender, LocationChangedEventArgs e)
    {
        CheckLocalStorage().ContinueWith((o) => StateHasChanged());
    }

    void Dispose() => NavManager.LocationChanged -= NavigationManager_LocationChanged;
}