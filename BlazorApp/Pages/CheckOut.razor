@page "/cart"
@using BLL.DTO.Responses
@using Domain.Enums
@inject HttpClient Http
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h3>CheckOut</h3>

@if(Products.Count > 0)
{
    <div class="row">
    @foreach(var product in Products)
    {
            <div class="col-sm-12">
                <div class="card">
                    <div class="row card-body">
                       <div class="col-sm-10">
                           <h5 class="card-title">@product.Name</h5>
                           <p class="card-text">Price: $@product.Price</p>
                           <p class="card-text">Amount: @Cart.Products[product.Id]</p>
                        </div>
                        <img class="col-sm-2" src="@(
                                        (@product.Image is null || @product.Image == "no image") ? 
                                        "https://agrii.com.ua/image/no-image.jpg"
                                        : @product.Image)" alt="sans"/>
                    </div>
                </div>
            </div>
    }
    </div>
    <h3>Total price: $@TotalPrice</h3>
    <button class="btn btn-success" onclick=@OrderHandler>Order</button>
} else
{
    <p>No items yet</p>

}

@code {
    float TotalPrice = 0;

    [CascadingParameter]
    CartModel Cart { get; set; }

    [CascadingParameter]
    string CurrentUserId { get; set; }

    List<ProductResponse> Products = new();

    protected override async Task OnInitializedAsync()
    {
        TotalPrice = 0;
        foreach(var product in Cart.Products)
        {
            Console.WriteLine(product.Key + ": " + product.Value);
            var newProduct = await Http.GetFromJsonAsync<ProductResponse>("Products/" + product.Key);
            Products.Add(newProduct);
            TotalPrice += newProduct.Price * product.Value;
        }
    }

    private async Task OrderHandler()
    {
        var orderBody = new
        {
            CustomerId = CurrentUserId,
            DeliveryManId = 1,
            OrderStatus = OrderStatusEnum.AwaitingShipment,
            AddressId = 1,
            Products = Cart.Products
        };
        await Http.PostAsJsonAsync("Orders", orderBody);
        Products.Clear();
        Cart.Products.Clear();
        NavManager.NavigateTo("/");
    }
}
