@page "/orders"
@using Domain.Enums
@inject HttpClient Http
@inject NavigationManager NavManager

<h3>Orders</h3>

@if(OrdersList.Count > 0)
{
    <div class="row">
    @foreach(var order in OrdersList)
    {
        <div class="col-sm-12">
                <div class="card">
                    <div class="card-body">
                           <h5 class="card-title">Order Number: @order.id</h5>
                           <p class="card-text">Order Status: @order.orderStatus</p>
                           <p class="card-text">Date: @order.date</p>
                           <p class="card-text">Total Price: $@order.totalPrice</p>
                    </div>
                </div>
            </div>
    }
    </div>
    <nav>
          <ul class="pagination">
            <li class="page-item @(pagination.hasPrevious ? "" : "disabled")">
              <NavLink class="page-link" href=@("Orders?CustomerId=" + CurrentUserId  + "&PageNumber=" + (pagination.currentPage-1))>Previous</NavLink>
            </li>
                @for(int i=1;i<=@pagination.totalPages;i++)
                {
                    <li class="page-item @(pagination.currentPage == i ? "active" : "")">
                        <a class="page-link" href=@("Orders?CustomerId=" + CurrentUserId  + "&PageNumber=" + i)>
                            @i
                        </a>
                    </li>
                }
            <li class="page-item @(pagination.hasNext ? "" : "disabled")">
                <NavLink class="page-link" href=@("Orders?CustomerId=" + CurrentUserId  + "&PageNumber=" + (pagination.currentPage+1))>Next</NavLink>
            </li>
          </ul>
        </nav>
}

@code {
    [CascadingParameter]
    string CurrentUserId { get; set; }

    PaginationInfo pagination;

    List<OrderBriefDto> OrdersList = new();

    protected override async Task OnInitializedAsync()
    {
        NavManager.LocationChanged += NavigationManager_LocationChanged;
        await LoadData();
    }

    private async Task LoadData()
    {
        var res = await Http.GetFromJsonAsync<PaginatedList<OrderBriefDto>>("Orders?CustomerId=" + CurrentUserId);
        pagination = new PaginationInfo() { 
            currentPage = res.pageNumber, 
            totalPages = res.totalPages,
            hasNext = res.hasNextPage,
            hasPrevious = res.hasPreviousPage 
        };
        OrdersList = res.items.ToList();
    }

    private void NavigationManager_LocationChanged(object sender, LocationChangedEventArgs e)
    {
        LoadData().ContinueWith((o) => StateHasChanged());
    }

    void Dispose() => NavManager.LocationChanged -= NavigationManager_LocationChanged;

    class PaginatedList<T>
    {
        public List<T> items { get; set; }
        public int pageNumber { get; set; }
        public int totalPages { get; set; }
        public bool hasPreviousPage { get; set; }
        public bool hasNextPage { get; set; }
    }

    class OrderBriefDto
    {
        public string id { get; set; }
        public float totalPrice { get; set; }
        public DateTime date { get; set; }
        public string orderStatus { get; set; }
    }
}
